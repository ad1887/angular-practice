{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/mockdata/Users.js","webpack:///./src/app/services/common.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","module.exports = \"<div class=\\\"container\\\">\\r\\n    <fieldset>\\r\\n        <legend>\\r\\n            <h3>Add new Employee</h3>\\r\\n        </legend>\\r\\n        <form name=\\\"emp\\\">\\r\\n            <p>\\r\\n                <label for=\\\"name\\\">Name</label><br />\\r\\n                <input name=\\\"name\\\" [(ngModel)]=\\\"empFrm.name\\\" />\\r\\n            </p>\\r\\n            <p>\\r\\n                <label for=\\\"empcode\\\">Empcode</label><br />\\r\\n                <input name=\\\"empcode\\\" [(ngModel)]=\\\"empFrm.empcode\\\" />\\r\\n            </p>\\r\\n            <p>\\r\\n                <label for=\\\"department\\\">Department</label><br />\\r\\n                <input name=\\\"department\\\" [(ngModel)]=\\\"empFrm.department\\\" />\\r\\n            </p>\\r\\n            <p>\\r\\n                <label for=\\\"grade\\\">Grade</label><br />\\r\\n                <input name=\\\"grade\\\" [(ngModel)]=\\\"empFrm.grade\\\" />\\r\\n            </p>\\r\\n            <input type=\\\"button\\\" (click)=\\\"addEmployee()\\\" value=\\\"Save\\\" />\\r\\n        </form>\\r\\n    </fieldset>\\r\\n    <hr>\\r\\n    <div *ngFor=\\\"let emp of empData\\\">\\r\\n        <div>\\r\\n            Employee Name: {{emp.name}}<br />\\r\\n            Empcode: {{emp.empcode}}<br />\\r\\n            Department: {{emp.department}}<br />\\r\\n            Grade: {{emp.grade}}<br /><br />\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","import { Component } from '@angular/core';\r\nimport { CommonService } from './services/common.service';\r\nimport { Employee } from './models/Employee.model';\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent {\r\n  empData: Employee[] = [];\r\n  empFrm:any = {};\r\n  constructor(private commonService: CommonService) {}\r\n  ngOnInit() {\r\n    const employeeObservable = this.commonService.getEmployData();\r\n    employeeObservable.subscribe(res => {\r\n      console.log('existing employees data >>', res);\r\n      this.empData = res;\r\n    });\r\n    // employeeObservable.unsubscribe();\r\n  }\r\n  addEmployee = () => {\r\n    console.log('form submitted ===>>>');\r\n    console.log(this.empFrm);\r\n    if(this.empFrm && this.empFrm.name && this.empFrm.empcode && this.empFrm.department && this.empFrm.grade) {\r\n      this.empData.unshift(this.empFrm);\r\n    }\r\n    this.empFrm = {};\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","export const Users = [\r\n        {\r\n          name: 'aman',\r\n          empcode: 'E00924',\r\n          department: 'Open Source',\r\n          grade: 'L4'\r\n        },\r\n        {\r\n          name: 'ankit',\r\n          empcode: 'E00654',\r\n          department: 'Java',\r\n          grade: 'L5'\r\n        },\r\n        {\r\n          name: 'varun',\r\n          empcode: 'E00123',\r\n          department: '.Net',\r\n          grade: 'L3'\r\n        },\r\n        {\r\n          name: 'sukh',\r\n          empcode: 'E00456',\r\n          department: 'Open Source',\r\n          grade: 'L5'\r\n        }\r\n    ];","import { Injectable } from '@angular/core';\nimport { Employee } from '../models/Employee.model';\nimport { Observable } from 'rxjs';\nimport { Users } from '../mockdata/Users'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommonService {\n  empData: Employee[] = Users;\n\n  constructor() { }\n\n  public getEmployData(): any {\n    const employeeObservable = new Observable(observer => {\n      setTimeout(() => {\n        observer.next(this.empData);\n        observer.complete();\n      }, 1000);\n    });\n    return employeeObservable;\n  }\n}\n","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}